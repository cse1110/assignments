package delft;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.*;
import java.util.stream.*;
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.*;
import org.junit.jupiter.params.provider.*;

class CollectionUtilsTest {

    @ParameterizedTest(name = "{0}")
    @MethodSource("generator")
    void containsAny(String description, Collection<?> coll1, Collection<?> coll2, boolean expected) {
        assertThat(CollectionUtils.containsAny(coll1, coll2)).isEqualTo(expected);
    }

    public static Stream<Arguments> generator() {
        return Stream.of(
                Arguments.of("many elements in c1, c2, single intersection", Arrays.asList(1, 2, 3), Arrays.asList(4, 1, 5), true),
                Arguments.of("many elements in c1, c2, >1 intersection", Arrays.asList(1, 2, 3), Arrays.asList(1, 4, 2), true),
                Arguments.of("many elements in c1, c2, no intersection", Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), false),
                Arguments.of("single element in c1, many in c2, intersection", Arrays.asList(1), Arrays.asList(1, 4, 5), true),
                Arguments.of("single element in c1, many in c2, no intersection", Arrays.asList(1), Arrays.asList(4, 5, 6), false),
                Arguments.of("many elements in c1, single in c2, intersection", Arrays.asList(1, 4, 5), Arrays.asList(1), true),
                Arguments.of("many elements in c1, single in c2, no intersection", Arrays.asList(4, 5, 6), Arrays.asList(1), false),
                Arguments.of("empty c1", new ArrayList<Integer>(), Arrays.asList(1), false),
                Arguments.of("empty c2", Arrays.asList(1), Collections.emptyList(), false),
                Arguments.of("empty c1 and c2", Collections.emptyList(), Collections.emptyList(), false)
        );
    }

    @ParameterizedTest(name = "{0}")
    @MethodSource("nullGenerator")
    void nullList(String description, Collection<?> coll1, Collection<?> coll2) {
        assertThatThrownBy(() -> CollectionUtils.containsAny(coll1, coll2)).isInstanceOf(Exception.class);
    }

    public static Stream<Arguments> nullGenerator() {
        return Stream.of(
                Arguments.of("c1 null", null, Arrays.asList(1, 4, 5)),
                Arguments.of("c2 null", Arrays.asList(1, 2, 3), null),
                Arguments.of("both null", null, null)
        );
    }

}
